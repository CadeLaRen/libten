[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:stack Stack allocation]

A __context__ requires a stack which will be allocated/deallocated
by a `stack allocator`.
__boost_context__ uses __stack_allocator__ by default but a
customized `stack allocator` can be passed to the context constructor
instead.
If a context is constructed it invokes __stack_alloc__ function and by its
destruction the stack gets released by __stack_dealloc__.
A `stack allocator` must implement the __stack_allocator_concept__ concept.

A stack allocator must model following concept.

    class stack_allocator
    {
    public:
        void * allocate( std::size_t size);

        void deallocate( void * vp, std::size_t size);
    };


[heading `void * allocate( std::size_t size)`]
[variablelist
[[Preconditions:] []]
[[Effects:] [Allocates memory used for the stack.]]
]

[heading `void deallocate( void * vp, std::size_t size)`]
[variablelist
[[Preconditions:] []]
[[Effects:] [Dellocates memory used by the stack.]]
]

[important The implementation should protect for exceeding the stacksize!
If the stack grows over its bounds it would generate in best case a segmentation
fault/access violation otherwise the memory of the application will be
overwritten resulting in undefined behaviour.]


[section:stack_allocator Class `stack_allocator`]

__boost_context__ provides a __stack_allocator__ which models the
__stack_allocator_concept__ concept.
It appends a __guard_page__ to protect against exceeding the stack. If the guard
page is accessed (read or write operation) a segmentation fault/access violation
is generated by the operating system.

[endsect]


[section:stack_helper Helper functions]

__boost_context__ provides an easy access to the stack related limits defined by
the environment.

        std::size_t default_stacksize();

        std::size_t minimum_stacksize();

        std::size_t maximum_stacksize();

        bool is_stack_unbound();

        std::size_t pagesize();

        std::size_t page_count( std::size_t stacksize);

[heading `std::size_t default_stacksize()`]
[variablelist
[[Returns:] [Defines a default stack size of 256 kB.]]
]

[heading `std::size_t minimum_stacksize()`]
[variablelist
[[Returns:] [Returns the minimum size in bytes of stack defined by the environment.]]
[[Throws:] [Nothing.]]
]

[heading `std::size_t maximum_stacksize()`]
[variablelist
[[Preconditions:] [`is_stack_unbound()` returns `false`.]]
[[Returns:] [Returns the maximum size in bytes of stack defined by the environment.]]
[[Throws:] [Nothing.]]
]

[heading `bool is_stack_unbound()`]
[variablelist
[[Returns:] [Returns `true` if the environment defines no limit for the size of a stack.]]
[[Throws:] [Nothing.]]
]

[heading `std::size_t pagesize()`]
[variablelist
[[Returns:] [Returns how many bytes the operating system allocates for one page.]]
[[Throws:] [Nothing.]]
]

[heading `std::size_t page_count( std::size_t stacksize)`]
[variablelist
[[Returns:] [Returns how many pages have to be allocated for a stack of `stacksize` bytes.]]
[[Throws:] [Nothing.]]
]

[endsect]

[endsect]
