[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:installtion How to build and install]

* download the sources from
[@https://github.com/olk/boost.context GitHub]
* extract the archive into the boost-source directory

The only supported compilers are GCC, Intel and MSVC. On POSIX and Windows systems, GNU AS and MASM
are respectively required for the assembler implementation of __boost_context__.

[note Because __boost_build__ provides the architecture, instruction-set and
address-model as optional properites (not set by __boost_build__) you have to specify them at bjam command-line.]

[table
    [[][]]
    [
        [ARM, UNIX, aapcs, elf]
        [bjam toolset = gcc architecture = arm]
    ]
    [
        [MIPS (32bit), UNIX, o32, elf]
        [bjam toolset = gcc architecture = mips1
            [footnote Because of a bug in shared_ptr you have to apply a patch 'patches/llsc-mips.patch' to shared_ptr or provide cxxflags="-mips2" at bjam command-line.]
        ]
    ]
    [
        [I386, UNIX, sysv, elf]
        [bjam toolset = gcc architecture = x86 instruction-set = i686 address-model = 32]
    ]
    [
        [I386, UNIX, sysv, elf]
        [bjam toolset = intel architecture = x86 instruction-set = i686 address-model = 32]
    ]
    [
        [I386, Windows, ms, pe]
        [bjam toolset = msvc-9.0 architecture = x86 instruction-set = i686 address-model = 32]
    ]
    [
        [PowerPc (32bit), UNIX, sysv, elf]
        [bjam toolset = gcc architecture = power address-model = 32]
    ]
    [
        [PowerPc (64bit), UNIX, sysv, elf]
        [bjam toolset = gcc architecture = power address-model = 64]
    ]
    [
        [X86_64, UNIX, sysv, elf]
        [bjam toolset = gcc architecture = x86 instruction-set = yorksfield address-model = 64]
    ]
    [
        [X86_64, UNIX, sysv, elf]
        [bjam toolset = intel architecture = x86 instruction-set = yorksfield address-model = 64]
    ]
    [
        [X86_64, Windows, ms, pe]
        [bjam toolset = msvc-10.0 architecture = x86 instruction-set = yorksfield address-model = 64]
    ]
]
[/
If desired you can use the native implementation provided by the operating system by defining a
special preprocoessor macro:

[table
    [[]]
    [
        [POSIX (ucontext_t is obsolete since POSIX 2003, removed in POSIX 2008)]
        [bjam toolset = gcc ... cxxflags = "-DBOOST_CONTEXT_UCTX"]
    ]
    [
        [Windows]
        [bjam toolset = msvc-10.0 ... cxxflags = "-DBOOST_CONTEXT_FIBER"]
    ]
]
]
[endsect]
