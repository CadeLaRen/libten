[/
          Copyright Oliver Kowalke 2009.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:continuation Continuation]

Adapted from [@https://code.google.com/p/jyield/wiki/Samples Java continuation] documentation example. 

Class `continuation` provides the ability for functor objects to suspend itself.
The functor is required to accept a const reference to its own `continuation` instance.

    class continuation
    {
    private:
        boost::contexts::context<>                  ctx_;
        boost::function< void( continuation &) >    fn_;

        void trampoline_()
        { fn_( * this); }

    public:
        continuation( boost::function< void( continuation &) > const& fn) :
            ctx_(
                & continuation::trampoline_, this,
                boost::contexts::protected_stack( boost::contexts::stack_helper::default_stacksize()),
                false),
            fn_( fn)
        {}

        void resume()
        { ctx_.resume(); }

        void suspend()
        { ctx_.suspend(); }

        bool is_complete() const
        { return ctx_.is_complete(); }
    };


The functions `first()` and `second()` are so-called coroutines running 'in parallel'.
Please note that the variables in the for-loops have local scope.

    void first( continuation & c)
    {
        std::cout << "started first! ";
        for ( int i = 0; i < 10; ++i)
        {
            c.suspend(); // jump back to main()
            std::cout << "a" << i; // output
        }
    }

    void second( continuation & c)
    {
        std::cout << "started second! ";
        for ( int i = 0; i < 10; ++i)
        {
            c.suspend(); // jump back to main()
            std::cout << "b" << i; // output
        }
    }

    int main( int argc, char * argv[])
    {
        {
            continuation c1( boost::bind( first, _1) );
            continuation c2( boost::bind( second, _1) );
            // loop until coroutines c1 and c2 are complete
            while ( ! c1.is_complete() && ! c2.is_complete() ) {
                c1.resume(); // call coroutine c1 -> first()
                std::cout << " ";
                c2.resume(); // call coroutine c2 -> second()
                std::cout << " ";
            }
        }

        std::cout << "\nDone" << std::endl;

        return EXIT_SUCCESS;
    }

[endsect]
