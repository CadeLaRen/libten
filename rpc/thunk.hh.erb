#include "error.hh"

using namespace ten;

<% GENERATION_LIMIT = 8 %>

template <typename Result>
msgpack::object return_thunk(const std::function<Result ()> &f, msgpack::object &o, msgpack::zone *z) {
    if (o.type != msgpack::type::ARRAY) { throw msgpack::type_error(); }
    if (o.via.array.size != 0) throw errorx("wrong number of method params. expected %d got %d.", 0, o.via.array.size);

    Result r = f();
    return msgpack::object(r, z);
}

template <typename Result, typename F>
std::function<msgpack::object (msgpack::object &o, msgpack::zone *z)> thunk(F *f) {
    using namespace std::placeholders;
    return std::bind(return_thunk<Result>, f);
}

<%0.upto(GENERATION_LIMIT) {|i|%>
template <typename Result, typename A0<%1.upto(i) {|j|%>, typename A<%=j%><%}%>>
msgpack::object return_thunk(const std::function<Result (A0<%1.upto(i) {|j|%>, A<%=j%><%}%>)> &f, msgpack::object &o, msgpack::zone *z) {
    struct params {
        A0 a0;
        <%1.upto(i) {|j|%>A<%=j%> a<%=j%>;
        <%}%>
    };

    params p;

    if (o.type != msgpack::type::ARRAY) { throw msgpack::type_error(); }
    if (o.via.array.size != <%=i+1%>) throw errorx("wrong number of method params. expected %d got %d.", <%=i+1%>, o.via.array.size);

    o.via.array.ptr[0].convert(&p.a0);
    <%1.upto(i) {|j|%>o.via.array.ptr[<%=j%>].convert(&p.a<%=j%>);
    <%}%>
    Result r = f(p.a0<%1.upto(i) {|j|%>, p.a<%=j%><%}%>);
    return msgpack::object(r, z);
}

template <typename Result, typename A0<%1.upto(i) {|j|%>, typename A<%=j%><%}%>, typename F>
std::function<msgpack::object (msgpack::object &o, msgpack::zone *z)> thunk(F *f) {
    using namespace std::placeholders;
    return std::bind(return_thunk<Result, A0<%1.upto(i) {|j|%>, A<%=j%><%}%>>, f<%1.upto(i+1) {|j|%>, _<%=j%><%}%>);
}
<%}%>
